{"version":3,"file":"index.mjs","sources":["../lib/minabs.js","../lib/main.js","../lib/ndarray.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} minimum absolute value\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = minabs( N, x, 1 );\n* // returns 1.0\n*/\nfunction minabs( N, x, stride ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmin = abs( x[ ix ] );\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = abs( x[ ix ] );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default minabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport minabs from './minabs.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( minabs, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default minabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} minimum absolute value\n*\n* @example\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = minabs( N, x, 2, 1 );\n* // returns 1.0\n*/\nfunction minabs( N, x, stride, offset ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tmin = abs( x[ ix ] );\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = abs( x[ ix ] );\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nexport default minabs;\n"],"names":["minabs","N","x","stride","min","ix","v","i","NaN","abs","isnan","setReadOnly","offset"],"mappings":";;qSA2CA,SAASA,EAAQC,EAAGC,EAAGC,GACtB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOM,EAAKP,EAAG,IAQhB,IADAE,EAAMK,EAAKP,EAJVG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,IAGAI,EAAI,EAAGA,EAAIN,EAAGM,IAAM,CAGzB,GADAD,EAAIG,EAAKP,EADTG,GAAMF,IAEDO,EAAOJ,GACX,OAAOA,EAEHA,EAAIF,IACRA,EAAME,GAGR,OAAOF,EC1CRO,EAAAX,EAAA,WCiBA,SAAiBC,EAAGC,EAAGC,EAAQS,GAC9B,IAAIR,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOO,IAER,GAAW,IAANP,GAAsB,IAAXE,EACf,OAAOM,EAAKP,EAAGU,IAIhB,IADAR,EAAMK,EAAKP,EADXG,EAAKO,IAECL,EAAI,EAAGA,EAAIN,EAAGM,IAAM,CAGzB,GADAD,EAAIG,EAAKP,EADTG,GAAMF,IAEDO,EAAOJ,GACX,OAAOA,EAEHA,EAAIF,IACRA,EAAME,GAGR,OAAOF"}